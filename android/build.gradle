buildscript {
    // Buildscript is evaluated before everything else so we can't use getExtOrDefault

    repositories {
        google()
        mavenCentral()
        maven { url "https://maven.juspay.in/jp-build-packages/hyper-sdk/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'in.juspay:hypersdk.plugin:2.0.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'hypersdk.plugin'

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['HyperSdkReact_' + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['HyperSdkReact_' + name]).toInteger()
}

android {
    compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
    buildToolsVersion getExtOrDefault('buildToolsVersion')
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
        versionCode 1
        versionName "1.0"

    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable 'GradleCompatible'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenCentral()
    jcenter()
    google()

    def found = false
    def defaultDir = null
    def androidSourcesName = 'React Native sources'

    if (rootProject.ext.has('reactNativeAndroidRoot')) {
        defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
    } else {
        defaultDir = new File(
                projectDir,
                '/../../../node_modules/react-native/android'
        )
    }

    if (defaultDir.exists()) {
        maven {
            url defaultDir.toString()
            name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
        found = true
    } else {
        def parentDir = rootProject.projectDir

        1.upto(5, {
            if (found) return true
            parentDir = parentDir.parentFile

            def androidSourcesDir = new File(
                    parentDir,
                    'node_modules/react-native'
            )

            def androidPrebuiltBinaryDir = new File(
                    parentDir,
                    'node_modules/react-native/android'
            )

            if (androidPrebuiltBinaryDir.exists()) {
                maven {
                    url androidPrebuiltBinaryDir.toString()
                    name androidSourcesName
                }

                logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
                found = true
            } else if (androidSourcesDir.exists()) {
                maven {
                    url androidSourcesDir.toString()
                    name androidSourcesName
                }

                logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
                found = true
            }
        })
    }

    if (!found) {
        throw new GradleException(
                "${project.name}: unable to locate React Native android sources. " +
                        "Ensure you have you installed React Native as a dependency in your project and try again."
        )
    }
}

static def mostRecentVersion(List<String> versions) {
    return versions.sort(false) { a, b ->
        [a, b]*.tokenize('-rc')*.join('')*.tokenize('.')*.collect {
            it as int
        }.with { u, v ->
            [u, v].transpose().findResult { x, y -> x <=> y ?: null } ?: u.size() <=> v.size()
        }
    }[-1]
}

static def getHyperSDKVersion(rootProject) {
    def hyperSdkVersion = '2.1.12'
    if (!rootProject.hasProperty('hyperSDKVersion')) {
        return hyperSdkVersion
    }
    def rootVersion = rootProject.hyperSDKVersion
    hyperSdkVersion = mostRecentVersion([rootVersion, hyperSdkVersion])
    if (hyperSdkVersion != rootVersion) {
        System.out.println("Ignoring the overriden SDK version present in root build.gradle ($rootVersion), as there is a newer version present in the SDK ($hyperSdkVersion).")
    }
    return hyperSdkVersion
}

static def getClientId(rootProject) {
    if (!rootProject.hasProperty('clientId')) {
        throw new GradleException("clientId parameter is required in ext block of root build.gradle")
    }
    return rootProject.clientId
}

dependencies {
    // noinspection GradleDynamicVersion
    api 'com.facebook.react:react-native:+'
}

hyperSdkPlugin {
    clientId = getClientId(rootProject)
    sdkVersion = getHyperSDKVersion(rootProject)
}
